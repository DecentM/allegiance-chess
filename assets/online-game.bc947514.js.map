{"version":3,"file":"online-game.bc947514.js","sources":["../../../../../src/pages/play/online-game.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, onBeforeUnmount, onMounted, watch } from 'vue'\nimport { useQuasar } from 'quasar'\n\nimport ChessBoard from '../../components/chess-board.vue'\nimport GameSidebar from '../../components/game-sidebar.vue'\nimport GameOverDialog from '../../components/game-over-dialog.vue'\n\nimport { ChessRtcConnection } from '../../hooks/chess-rtc-connection'\nimport { useBoardSize } from '../../hooks/board-size'\nimport { useBoardWorker } from '../../hooks/board-worker'\n\nconst props = defineProps<{\n  connection: ChessRtcConnection\n}>()\n\nonBeforeUnmount(() => {\n  props.connection.disconnect()\n})\n\nconst q = useQuasar()\nconst size = useBoardSize()\n\nconst perspective = computed(() => {\n  if (!props.connection.serverSide.value) {\n    return null\n  }\n\n  if (props.connection.mode.value === 'server') {\n    return props.connection.serverSide.value\n  }\n\n  return props.connection.serverSide.value === 'white' ? 'black' : 'white'\n})\n\nconst board = useBoardWorker({\n  autoplayFor: [],\n})\n\nonMounted(() => board.reset())\n\nconst handleExecuteNodeIndex = (index: number) => {\n  props.connection.sendMessage({\n    type: 'execute-node-index',\n    value: index,\n  })\n}\n\nwatch(props.connection.moveHistory, (newMoveHistory) => {\n  const lastMoveIndex = newMoveHistory.at(-1)\n\n  if (typeof lastMoveIndex !== 'number') {\n    return\n  }\n\n  board.executeMoveIndex(lastMoveIndex)\n})\n</script>\n\n<template>\n  <q-card flat class=\"full-width\">\n    <q-card-section\n      :horizontal=\"q.screen.gt.sm\"\n      :class=\"{ 'q-px-none': q.screen.lt.sm }\"\n    >\n      <q-card-section\n        :style=\"{ width: `${size}px` }\"\n        :class=\"{ 'q-px-none': q.screen.lt.sm }\"\n      >\n        <chess-board\n          :model-value=\"board.afen.value\"\n          :valid-moves=\"board.validMoves.value\"\n          :width=\"size\"\n          @execute-node-index=\"handleExecuteNodeIndex\"\n          :board=\"board\"\n          :perspective=\"perspective ?? 'white'\"\n          :play-as=\"['white', 'black']\"\n          :rounded-borders=\"q.screen.gt.xs\"\n          :active-colour=\"board.activeColour.value\"\n          :check-moves=\"board.checkMoves.value\"\n          :en-passant-target=\"board.enPassantTarget.value\"\n          :move-history-ast=\"board.moveHistoryAst.value\"\n          :squares=\"board.squares.value\"\n        />\n      </q-card-section>\n\n      <q-card-section class=\"q-mb-md full-width\">\n        <game-sidebar\n          :move-history=\"board.moveHistoryAst.value\"\n          :active-colour=\"board.activeColour.value\"\n          :own-colour=\"perspective ?? 'white'\"\n          :afen=\"board.afen.value\"\n          :game-over=\"board.gameOver.value\"\n        />\n      </q-card-section>\n    </q-card-section>\n\n    <game-over-dialog\n      v-if=\"board.gameOver.value\"\n      :node=\"board.gameOver.value\"\n    />\n  </q-card>\n</template>\n"],"names":["onBeforeUnmount","props","q","useQuasar","size","useBoardSize","perspective","computed","board","useBoardWorker","onMounted","handleExecuteNodeIndex","index","watch","newMoveHistory","lastMoveIndex"],"mappings":"2iBAgBAA,EAAgB,IAAM,CACpBC,EAAM,WAAW,YAAW,CAC7B,EAED,MAAMC,EAAIC,IACJC,EAAOC,IAEPC,EAAcC,EAAS,IACtBN,EAAM,WAAW,WAAW,MAI7BA,EAAM,WAAW,KAAK,QAAU,SAC3BA,EAAM,WAAW,WAAW,MAG9BA,EAAM,WAAW,WAAW,QAAU,QAAU,QAAU,QAPxD,IAQV,EAEKO,EAAQC,EAAe,CAC3B,YAAa,CAAC,CAAA,CACf,EAESC,EAAA,IAAMF,EAAM,MAAA,CAAO,EAEvB,MAAAG,EAA0BC,GAAkB,CAChDX,EAAM,WAAW,YAAY,CAC3B,KAAM,qBACN,MAAOW,CAAA,CACR,CAAA,EAGH,OAAAC,EAAMZ,EAAM,WAAW,YAAca,GAAmB,CAChD,MAAAC,EAAgBD,EAAe,GAAG,EAAE,EAEtC,OAAOC,GAAkB,UAI7BP,EAAM,iBAAiBO,CAAa,CAAA,CACrC"}