{"version":3,"file":"online-game.f826d954.js","sources":["../../../../../src/pages/play/online-game.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { useQuasar } from 'quasar'\n\nimport GameLayout from '../../components/game-layout.vue'\n\nimport ChessBoard from '../../components/chess-board.vue'\nimport GameSidebar from '../../components/game-sidebar.vue'\nimport GameOverDialog from '../../components/game-over-dialog.vue'\n\nimport { ChessRtcConnection } from '../../hooks/chess-rtc-connection'\nimport { useBoardWorker } from '../../hooks/board-worker'\n\nconst props = defineProps<{\n  connection: ChessRtcConnection\n}>()\n\nonBeforeUnmount(() => {\n  props.connection.disconnect()\n})\n\nconst q = useQuasar()\n\nconst perspective = computed(() => {\n  if (!props.connection.serverSide.value) {\n    return null\n  }\n\n  if (props.connection.isHost.value) {\n    return props.connection.serverSide.value\n  }\n\n  return props.connection.serverSide.value === 'white' ? 'black' : 'white'\n})\n\nconst autoplayFor = ref([])\n\nconst board = useBoardWorker({\n  autoplayFor,\n})\n\nonMounted(() => board.reset())\n\nconst handleExecuteNodeIndex = (index: number) => {\n  props.connection.sendMessage({\n    type: 'execute-node-index',\n    value: index,\n  })\n}\n\nwatch(props.connection.moveHistory, (newMoveHistory) => {\n  const lastMoveIndex = newMoveHistory[newMoveHistory.length - 1]\n\n  if (typeof lastMoveIndex !== 'number') {\n    return\n  }\n\n  board.executeMoveIndex(lastMoveIndex)\n})\n</script>\n\n<template>\n  <game-layout>\n    <template #board>\n      <chess-board\n        @execute-node-index=\"handleExecuteNodeIndex\"\n        :model-value=\"board.afen.value\"\n        :valid-moves=\"board.validMoves.value\"\n        :board=\"board\"\n        :perspective=\"perspective ?? 'white'\"\n        :play-as=\"['white', 'black']\"\n        :rounded-borders=\"q.screen.gt.xs\"\n        :active-colour=\"board.activeColour.value\"\n        :check-moves=\"board.checkMoves.value\"\n        :en-passant-target=\"board.enPassantTarget.value\"\n        :move-history-ast=\"board.moveHistoryAst.value\"\n        :squares=\"board.squares.value\"\n        :loading=\"board.loading.value\"\n      />\n    </template>\n\n    <template #sidebar>\n      <game-sidebar\n        :move-history=\"board.moveHistoryAst.value\"\n        :active-colour=\"board.activeColour.value\"\n        :own-colour=\"perspective ?? 'white'\"\n        :afen=\"board.afen.value\"\n        :game-over=\"board.gameOver.value\"\n      >\n        <q-item>\n          <q-item-section class=\"q-mt-sm q-mb-sm\">\n            <q-item-label>Opening</q-item-label>\n            <q-item-label caption lines=\"2\">\n              {{ board.opening.value || 'unknown' }}\n            </q-item-label>\n          </q-item-section>\n\n          <q-item-section side>\n            <q-icon name=\"book\" />\n          </q-item-section>\n        </q-item>\n      </game-sidebar>\n    </template>\n\n    <template #default>\n      <game-over-dialog\n        v-if=\"board.gameOver.value\"\n        :node=\"board.gameOver.value\"\n      />\n    </template>\n  </game-layout>\n</template>\n"],"names":["onBeforeUnmount","props","q","useQuasar","perspective","computed","autoplayFor","ref","board","useBoardWorker","onMounted","handleExecuteNodeIndex","index","watch","newMoveHistory","lastMoveIndex"],"mappings":"yoBAiBAA,EAAgB,IAAM,CACpBC,EAAM,WAAW,YAAW,CAC7B,EAED,MAAMC,EAAIC,IAEJC,EAAcC,EAAS,IACtBJ,EAAM,WAAW,WAAW,MAI7BA,EAAM,WAAW,OAAO,MACnBA,EAAM,WAAW,WAAW,MAG9BA,EAAM,WAAW,WAAW,QAAU,QAAU,QAAU,QAPxD,IAQV,EAEKK,EAAcC,EAAI,CAAA,CAAE,EAEpBC,EAAQC,EAAe,CAC3B,YAAAH,CAAA,CACD,EAESI,EAAA,IAAMF,EAAM,MAAA,CAAO,EAEvB,MAAAG,EAA0BC,GAAkB,CAChDX,EAAM,WAAW,YAAY,CAC3B,KAAM,qBACN,MAAOW,CAAA,CACR,CAAA,EAGH,OAAAC,EAAMZ,EAAM,WAAW,YAAca,GAAmB,CAChD,MAAAC,EAAgBD,EAAeA,EAAe,OAAS,GAEzD,OAAOC,GAAkB,UAI7BP,EAAM,iBAAiBO,CAAa,CAAA,CACrC"}