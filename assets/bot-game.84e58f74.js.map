{"version":3,"file":"bot-game.84e58f74.js","sources":["../../../../../src/pages/play/bot-game.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, onBeforeUnmount, onMounted, ref } from 'vue'\nimport { useQuasar } from 'quasar'\n\nimport { Board, AfenPreset } from '@decentm/allegiance-chess-core'\n\nimport type { BotWorkerMessage, BotWorkerResponse } from '../../lib/bot-worker'\nimport BotWorker from '../../lib/bot-worker?worker'\n\nimport ChessBoard from '../../components/chess-board.vue'\nimport GameSidebar from '../../components/game-sidebar.vue'\nimport GameOverDialog from '../../components/game-over-dialog.vue'\n\nimport { useGameover } from '../../hooks/game-over'\nimport { useBoardSize } from '../../hooks/board-size'\n\nimport { useBoardAudio } from '../../hooks/board-audio'\n\nconst afen = ref<string>('')\nconst moveHistory = ref<string>('')\nconst activeColour = ref<'white' | 'black'>('white')\nconst boardScore = ref(0)\n\nconst userSide = ref<'white' | 'black' | null>()\nconst audio = useBoardAudio()\nconst worker = ref<Worker | null>()\n\nconst board = computed(() => {\n  return new Board(afen.value || AfenPreset.VanillaDefault, moveHistory.value)\n})\n\nconst { gameOver } = useGameover(board)\n\nconst handleWorkerMessage = (messageEvent: MessageEvent<BotWorkerResponse>) => {\n  const message = messageEvent.data\n\n  switch (message.type) {\n    case 'board-update':\n      afen.value = message.afen\n      moveHistory.value = message.moveHistory\n      activeColour.value = message.activeColour\n      boardScore.value = message.boardScore\n      break\n\n    case 'node-execution':\n      audio?.playNode(message.node)\n      break\n  }\n\n  if (\n    message.type === 'board-update' &&\n    message.activeColour !== userSide.value &&\n    !gameOver.value\n  ) {\n    worker.value?.postMessage({ type: 'bot-move' } as BotWorkerMessage)\n  }\n}\n\nonMounted(() => {\n  worker.value = new BotWorker()\n\n  worker.value.addEventListener('message', handleWorkerMessage)\n  worker.value.postMessage({ type: 'reset' } as BotWorkerMessage)\n\n  userSide.value = Math.random() > 0.5 ? 'white' : 'black'\n})\n\nonBeforeUnmount(() => {\n  worker.value?.removeEventListener('message', handleWorkerMessage)\n\n  worker.value?.postMessage({ type: 'reset' } as BotWorkerMessage)\n})\n\nconst handleExecuteNodeIndex = (index: number) => {\n  worker.value?.postMessage({\n    type: 'execute-move-index',\n    index,\n  } as BotWorkerMessage)\n}\n\nconst q = useQuasar()\nconst size = useBoardSize()\n</script>\n\n<template>\n  <q-card flat class=\"full-width\">\n    <q-card-section\n      v-if=\"userSide\"\n      :horizontal=\"q.screen.gt.sm\"\n      :class=\"{ 'q-px-none': q.screen.lt.sm }\"\n    >\n      <q-card-section\n        :style=\"{ width: `${size}px` }\"\n        :class=\"{ 'q-px-none': q.screen.lt.sm }\"\n      >\n        <chess-board\n          @execute-node-index=\"handleExecuteNodeIndex\"\n          :board=\"board\"\n          :perspective=\"userSide\"\n          :play-as=\"['white', 'black']\"\n          :width=\"size\"\n          :rounded-borders=\"q.screen.gt.xs\"\n        />\n      </q-card-section>\n\n      <q-card-section class=\"q-mb-md full-width\">\n        <game-sidebar\n          :move-history=\"board.getMoveHistoryAst()\"\n          :active-colour=\"activeColour\"\n          :own-colour=\"userSide\"\n          :afen=\"board.toAFEN()\"\n          :game-over=\"gameOver\"\n        >\n          <q-item>\n            <q-item-section class=\"q-mt-sm q-mb-sm\">\n              <q-item-label>Evaluation</q-item-label>\n              <q-item-label caption lines=\"2\">{{ boardScore }}</q-item-label>\n            </q-item-section>\n\n            <q-item-section side>\n              <q-icon name=\"exposure_plus_1\" />\n            </q-item-section>\n          </q-item>\n        </game-sidebar>\n      </q-card-section>\n    </q-card-section>\n\n    <game-over-dialog v-if=\"gameOver\" :node=\"gameOver\" />\n  </q-card>\n</template>\n"],"names":["afen","ref","moveHistory","activeColour","boardScore","userSide","audio","useBoardAudio","worker","board","computed","Board","AfenPreset","gameOver","useGameover","handleWorkerMessage","messageEvent","message","_a","onMounted","BotWorker","onBeforeUnmount","_b","handleExecuteNodeIndex","index","q","useQuasar","size","useBoardSize"],"mappings":"ktBAkBM,MAAAA,EAAOC,EAAY,EAAE,EACrBC,EAAcD,EAAY,EAAE,EAC5BE,EAAeF,EAAuB,OAAO,EAC7CG,EAAaH,EAAI,CAAC,EAElBI,EAAWJ,IACXK,EAAQC,IACRC,EAASP,IAETQ,EAAQC,EAAS,IACd,IAAIC,EAAMX,EAAK,OAASY,EAAW,eAAgBV,EAAY,KAAK,CAC5E,EAEK,CAAE,SAAAW,CAAA,EAAaC,EAAYL,CAAK,EAEhCM,EAAuBC,GAAkD,OAC7E,MAAMC,EAAUD,EAAa,KAE7B,OAAQC,EAAQ,UACT,eACHjB,EAAK,MAAQiB,EAAQ,KACrBf,EAAY,MAAQe,EAAQ,YAC5Bd,EAAa,MAAQc,EAAQ,aAC7Bb,EAAW,MAAQa,EAAQ,WAC3B,UAEG,iBACIX,GAAA,MAAAA,EAAA,SAASW,EAAQ,MACxB,MAIFA,EAAQ,OAAS,gBACjBA,EAAQ,eAAiBZ,EAAS,OAClC,CAACQ,EAAS,SAEVK,EAAAV,EAAO,QAAP,MAAAU,EAAc,YAAY,CAAE,KAAM,UAAgC,GACpE,EAGFC,EAAU,IAAM,CACPX,EAAA,MAAQ,IAAIY,EAEZZ,EAAA,MAAM,iBAAiB,UAAWO,CAAmB,EAC5DP,EAAO,MAAM,YAAY,CAAE,KAAM,OAA6B,CAAA,EAE9DH,EAAS,MAAQ,KAAK,OAAO,EAAI,GAAM,QAAU,OAAA,CAClD,EAEDgB,EAAgB,IAAM,UACbH,EAAAV,EAAA,QAAA,MAAAU,EAAO,oBAAoB,UAAWH,IAE7CO,EAAAd,EAAO,QAAP,MAAAc,EAAc,YAAY,CAAE,KAAM,OAA6B,EAAA,CAChE,EAEK,MAAAC,EAA0BC,GAAkB,QAChDN,EAAAV,EAAO,QAAP,MAAAU,EAAc,YAAY,CACxB,KAAM,qBACN,MAAAM,CAAA,EACmB,EAGjBC,EAAIC,IACJC,EAAOC"}