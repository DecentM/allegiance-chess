import{r as d,B as b,o as x,d as m,a as p,M as D,aj as A,w as S,Y as E,N as F,O,$ as H}from"./index.6e54b282.js";import{H as R}from"./hex.93c6ba9e.js";import{u as I}from"./use-quasar.95797504.js";import{F as T}from"./boards.07b20eb6.js";const j=()=>{const a=I();return{notify:o=>{a.notify({timeout:4e3,position:"bottom-right",...o})}}},q=()=>{const a=d(null),{notify:s}=j(),o=d(null),r=d([]),n=d(),l=d("initial"),c=e=>{r.value=[...r.value,e]},i=e=>{const u=t=>{if(t instanceof ArrayBuffer){c({type:"data",value:m.Buffer.from(t)});return}if(!m.Buffer.isBuffer(t)){console.warn("Non-buffer data received through WebRTC!",t);return}c({type:"data",value:t})},f=t=>{c({type:"state",value:t})},C=()=>{c({type:"open",value:void 0})},_=t=>{var v;c({type:"error",value:t}),(v=n.value)==null||v.close(),s({message:"Connection error",caption:t.message,icon:"link_off",iconColor:"red"})},B=()=>{var t,v,M,k,N;(t=n.value)==null||t.on("data",u),(v=n.value)==null||v.on("error",_),(M=n.value)==null||M.on("close",B),(k=n.value)==null||k.on("iceStateChanged",f),(N=n.value)==null||N.on("open",C),l.value="initial",n.value=null,r.value=[],s({message:"Connection closed",icon:"link_off"})};e.on("data",u),e.on("error",_),e.on("close",B),e.on("iceStateChanged",f),e.on("open",C)};return b(()=>{a.value=new(require("peerjs")),a.value.on("open",e=>{o.value=R.utf8ToHex(e),s({message:"Connection ready",icon:"check",iconColor:"green"})}),a.value.on("connection",e=>{if(n.value){s({message:"Refused secondary connection",icon:"link_off",iconColor:"red"}),e.close();return}l.value="server",i(e),n.value=e,s({message:"Connected to guest",icon:"link"})})}),x(()=>{var e,u;(e=a.value)==null||e.destroy(),(u=n.value)==null||u.close()}),{connect:e=>{if(n.value||!a.value||!e)return;const u=R.hexToUtf8(e),f=a.value.connect(u);l.value="client",i(f),n.value=f,s({message:"Connected to host",icon:"link"})},mode:l,peerId:o,messages:r,sendData:e=>n.value?(n.value.send(e),c({type:"data",value:e}),!0):!1,disconnect:()=>n.value?(n.value.close(),n.value=null,!0):!1}},w=()=>{const{connect:a,mode:s,peerId:o,sendData:r,messages:n,disconnect:l}=q(),c=e=>{r(m.Buffer.from(JSON.stringify(e),"utf8"))},i=p(()=>n.value.filter(e=>e.type==="data").map(e=>m.Buffer.isBuffer(e.value)?JSON.parse(e.value.toString("utf8")):null)),g=p(()=>{const e=i.value.findLast(u=>u.type==="afen-update");return e&&e.value||""}),y=p(()=>n.value.some(e=>e.type==="open")),h=p(()=>{const e=i.value.find(u=>u.type==="side-assignment");return e?e.value:null});return{connect:a,mode:s,peerId:o,boardAFEN:g,sendMessage:c,open:y,disconnect:l,serverSide:h}},P=D({__name:"play-page",setup(a){const s=A(),o=w();return S(o.mode,r=>{r==="initial"&&s.push("/play")}),S(o.open,r=>{!r||(s.push(`/play/online/${o.peerId.value}`),o.mode.value==="server"&&(o.sendMessage({type:"side-assignment",value:Math.random()>.5?"white":"black"}),o.sendMessage({type:"afen-update",value:T.VanillaDefault})))}),(r,n)=>{const l=E("router-view");return F(),O(l,{connection:H(o)},null,8,["connection"])}}});export{P as default};
