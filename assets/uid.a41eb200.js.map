{"version":3,"file":"uid.a41eb200.js","sources":["../../../../../../../node_modules/quasar/src/utils/uid.js"],"sourcesContent":["/**\n * Based on the work of https://github.com/jchook/uuid-random\n */\n\nlet\n  buf,\n  bufIdx = 0\nconst hexBytes = new Array(256)\n\n// Pre-calculate toString(16) for speed\nfor (let i = 0; i < 256; i++) {\n  hexBytes[ i ] = (i + 0x100).toString(16).substring(1)\n}\n\n// Use best available PRNG\nconst randomBytes = (() => {\n  // Node & Browser support\n  const lib = typeof crypto !== 'undefined'\n    ? crypto\n    : (\n        typeof window !== 'undefined'\n          ? window.crypto || window.msCrypto\n          : void 0\n      )\n\n  if (lib !== void 0) {\n    if (lib.randomBytes !== void 0) {\n      return lib.randomBytes\n    }\n    if (lib.getRandomValues !== void 0) {\n      return n => {\n        const bytes = new Uint8Array(n)\n        lib.getRandomValues(bytes)\n        return bytes\n      }\n    }\n  }\n\n  return n => {\n    const r = []\n    for (let i = n; i > 0; i--) {\n      r.push(Math.floor(Math.random() * 256))\n    }\n    return r\n  }\n})()\n\n// Buffer random numbers for speed\n// Reduce memory usage by decreasing this number (min 16)\n// or improve speed by increasing this number (try 16384)\nconst BUFFER_SIZE = 4096\n\nexport default function () {\n  // Buffer some random bytes for speed\n  if (buf === void 0 || (bufIdx + 16 > BUFFER_SIZE)) {\n    bufIdx = 0\n    buf = randomBytes(BUFFER_SIZE)\n  }\n\n  const b = Array.prototype.slice.call(buf, bufIdx, (bufIdx += 16))\n  b[ 6 ] = (b[ 6 ] & 0x0f) | 0x40\n  b[ 8 ] = (b[ 8 ] & 0x3f) | 0x80\n\n  return hexBytes[ b[ 0 ] ] + hexBytes[ b[ 1 ] ]\n    + hexBytes[ b[ 2 ] ] + hexBytes[ b[ 3 ] ] + '-'\n    + hexBytes[ b[ 4 ] ] + hexBytes[ b[ 5 ] ] + '-'\n    + hexBytes[ b[ 6 ] ] + hexBytes[ b[ 7 ] ] + '-'\n    + hexBytes[ b[ 8 ] ] + hexBytes[ b[ 9 ] ] + '-'\n    + hexBytes[ b[ 10 ] ] + hexBytes[ b[ 11 ] ]\n    + hexBytes[ b[ 12 ] ] + hexBytes[ b[ 13 ] ]\n    + hexBytes[ b[ 14 ] ] + hexBytes[ b[ 15 ] ]\n}\n"],"names":["buf","bufIdx","hexBytes","i","randomBytes","lib","n","bytes","BUFFER_SIZE","uid","b"],"mappings":"AAIA,IACEA,EACAC,EAAS,EACX,MAAMC,EAAW,IAAI,MAAM,GAAG,EAG9B,QAASC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAUC,IAAOA,EAAI,KAAO,SAAS,EAAE,EAAE,UAAU,CAAC,EAItD,MAAMC,GAAe,IAAM,CAEzB,MAAMC,EAAM,OAAO,QAAW,YAC1B,OAEE,OAAO,QAAW,YACd,OAAO,QAAU,OAAO,SACxB,OAGV,GAAIA,IAAQ,OAAQ,CAClB,GAAIA,EAAI,cAAgB,OACtB,OAAOA,EAAI,YAEb,GAAIA,EAAI,kBAAoB,OAC1B,OAAOC,GAAK,CACV,MAAMC,EAAQ,IAAI,WAAWD,CAAC,EAC9B,OAAAD,EAAI,gBAAgBE,CAAK,EAClBA,CACR,CAEJ,CAED,OAAOD,GAAK,CACV,MAAM,EAAI,CAAE,EACZ,QAASH,EAAIG,EAAGH,EAAI,EAAGA,IACrB,EAAE,KAAK,KAAK,MAAM,KAAK,OAAM,EAAK,GAAG,CAAC,EAExC,OAAO,CACR,CACH,GAAI,EAKEK,EAAc,KAEL,SAAAC,GAAY,EAErBT,IAAQ,QAAWC,EAAS,GAAKO,KACnCP,EAAS,EACTD,EAAMI,EAAYI,CAAW,GAG/B,MAAME,EAAI,MAAM,UAAU,MAAM,KAAKV,EAAKC,EAASA,GAAU,EAAI,EACjE,OAAAS,EAAG,GAAOA,EAAG,GAAM,GAAQ,GAC3BA,EAAG,GAAOA,EAAG,GAAM,GAAQ,IAEpBR,EAAUQ,EAAG,IAAQR,EAAUQ,EAAG,IACrCR,EAAUQ,EAAG,IAAQR,EAAUQ,EAAG,IAAQ,IAC1CR,EAAUQ,EAAG,IAAQR,EAAUQ,EAAG,IAAQ,IAC1CR,EAAUQ,EAAG,IAAQR,EAAUQ,EAAG,IAAQ,IAC1CR,EAAUQ,EAAG,IAAQR,EAAUQ,EAAG,IAAQ,IAC1CR,EAAUQ,EAAG,KAASR,EAAUQ,EAAG,KACnCR,EAAUQ,EAAG,KAASR,EAAUQ,EAAG,KACnCR,EAAUQ,EAAG,KAASR,EAAUQ,EAAG,IACzC"}